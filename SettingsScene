import java.io.PrintWriter;
import java.net.Socket;

import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;

// Author: Lillian Davis

public class SettingsScene extends SceneBasic
{
	private TextField textH;
	private TextField textP;
	private Label errorLabel;
	private GridPane root;
	
	public SettingsScene() {
		super("Settings");
		
		Label title = new Label("Settings Scene");
		title.setFont(new Font(40));
				
		Label labelH = new Label("Host: ");//label for username texfield
		Label labelP = new Label("Port Number: ");//label for port textfield
		errorLabel = new Label();//will be set if there is an error connecting 
		textH = new TextField();//host textfield
		textP = new TextField();//port textfield
		
		Button cancel = new Button("Cancel");//login button
		Button connect = new Button("Connect");//settings button
		
		cancel.setOnAction(e-> 
			{	
				cancel();
			});//go back to loginScene
		connect.setOnAction(e->
			{
				apply();
			});
		
		root = new GridPane();//container holding the labels and textfeilds for port and host

		root.add(labelH,0,0);
		root.add(labelP,0,1);
		root.add(textH,1,0);
		root.add(textP,1,1);
		
		root.add(connect, 0, 3);
		root.add(cancel, 1, 3);
		root.add(quit, 2, 3);
		
		VBox vbox = new VBox(30, title, root);
		vbox.setAlignment(Pos.CENTER);
		
		BorderPane bp = new BorderPane(vbox);
		BorderPane.setAlignment(bp, Pos.CENTER);
		super.scene = new Scene(bp, 400, 300);
		 
	}
	
	private void cancel()
	{
		errorLabel.setText("");
		textH.setText("");
		textP.setText("");
		SceneManager.setLoginScene();
	}
	
	private void apply()
	{
		try 
		{
			PrintWriter outgoing;
			if(SceneManager.getSocket()!= null)
				if(!SceneManager.getSocket().isClosed())
				{
					outgoing = new PrintWriter(SceneManager.getSocket().getOutputStream());
					outgoing.println("QUIT");
				}	
			String portNum = textP.getText();
			int port = Integer.parseInt(portNum);
			System.out.println(port);
			Socket connection = new Socket(textH.getText(),port);
			if(connection==null)
				errorLabel.setText("error: unable to connect to "+textH.getText());
			else
			{
				SceneManager.setSocket(connection);
				cancel();
			}
		}
		catch(Exception e)
		{
			errorLabel.setText("error: unable to connect to "+textH.getText());
			e.printStackTrace();
		}
	}
}
