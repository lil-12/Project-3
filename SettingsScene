// Author: Lillian Davis
import java.io.PrintWriter;
import java.net.Socket;

import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;

public class SettingsScene extends SceneBasic
{
	private TextField textH;//host textfield
	private TextField textP;//port number textfield
	private Label errorLabel;//error label will appear if an error occurs
	private GridPane root;//container holding the labels and textfeilds for port and host
	
	public SettingsScene() 
	{
		super("Settings");
		
		Label title = new Label("Settings Scene");//large scene title
		title.setFont(new Font(40));
				
		Label labelH = new Label("Host: ");//label for username texfield
		Label labelP = new Label("Port Number: ");//label for port textfield
		errorLabel = new Label(); 
		errorLabel.setTextFill(Color.color(1, 0, 0));
		textH = new TextField();
		textP = new TextField();
		
		Button cancel = new Button("Cancel");//login button, brings to loginScene, does not cut connection
		Button connect = new Button("Connect");//tries to connect to server
		
		cancel.setOnAction(e-> 
		{	
			cancel();//go back to loginScene
		});
		connect.setOnAction(e->
		{
			apply();//try to connect and if successful return to loginscene
		});
		
		root = new GridPane();

		root.add(labelH,1,0);
		root.add(labelP,1,1);
		root.add(textH,2,0);
		root.add(textP,2,1);
		
		root.add(connect, 1, 3);
		root.add(cancel, 2, 3);
		root.add(quit, 3, 3);//quit button from SceneBasic 
		
		root.add(new Label("\t"), 0, 0);
		
		
		VBox vbox = new VBox(30, title, root,errorLabel);
		vbox.setAlignment(Pos.CENTER);
		
		BorderPane bp = new BorderPane(vbox);
		BorderPane.setAlignment(bp, Pos.CENTER);
		super.scene = new Scene(bp, 400, 300);
		 
	}
	
	//sets textfields and errorlabel to blank and returns to loginScene
	private void cancel()
	{
		errorLabel.setText("");
		textH.setText("");
		textP.setText("");
		SceneManager.setLoginScene();
	}
	
	//attempts to connect to server
	private void apply()
	{
		try 
		{
			PrintWriter outgoing;
			if(SceneManager.getSocket()!= null)//checks that there isnt a current connection
				if(!SceneManager.getSocket().isClosed())//checks that there isnt a current connection
				{
					outgoing = new PrintWriter(SceneManager.getSocket().getOutputStream());
					outgoing.println("QUIT");//cuts the connection before trying to create a new one
				}	
			String portNum = textP.getText();
			int port = Integer.parseInt(portNum);
			System.out.println(port);
			Socket connection = new Socket(textH.getText(),port);//tries to create connection
			if(connection==null)//if it doesn't connect
				errorLabel.setText("error: unable to connect to "+textH.getText());
			else
			{
				SceneManager.setSocket(connection);//sets SceneMansger socket to the newly created socket
				cancel();//returns to loginScene
			}
		}
		catch(Exception e)
		{
			errorLabel.setText("error: unable to connect to "+textH.getText());//if an error occurs, print it out for user to see in settingsScene
			e.printStackTrace();
		}
	}
}
