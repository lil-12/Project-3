// Authors: Lillian Davis and David Corrales Marco

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Scanner;

public class StoreServer 
{
	static ArrayList<Account> accounts = new ArrayList<Account>();//list of accounts used by application
	static Account userAccount;//account currently being accessed
	static BufferedReader incoming;//BufferedReader used to read data from client
	static PrintWriter outgoing;//PrintWriter that sends data to client
	static int LISTENING_PORT =52431;//port used by server that clients should connect to

	public static void main(String[] args) 
	{
		StoreServer.readAccounts(accounts);//reads data file of accounts
		try 
		{
			ServerSocket serve = new ServerSocket(LISTENING_PORT);
			System.out.println("Listening on port: "+LISTENING_PORT);
			Socket connection = serve.accept();
			System.out.println("accepted connection");
			outgoing = new PrintWriter(connection.getOutputStream());
			incoming = new BufferedReader(new InputStreamReader(connection.getInputStream()));
			while(true)//continue to wait for a connection indefinitely
			{
				String fromUser = incoming.readLine();//signal from user
				if(fromUser.equals("LOGIN"))
				{
					login(accounts,incoming,outgoing);
				}
				if(fromUser.equals("ACCOUNTLIST"))
				{
					sendAccountList(outgoing);
				}
				if(fromUser.equals("PROFILE"))
				{
					sendProfile(outgoing);
				}
				if(fromUser.equals("QUIT"))//closes connection and opens a new one at the same port number
				{
					serve.close();
					System.out.println("server closed");
					 serve = new ServerSocket(LISTENING_PORT);
					connection =serve.accept();
					outgoing = new PrintWriter(connection.getOutputStream());
					incoming = new BufferedReader(new InputStreamReader(connection.getInputStream()));
				}
				if(fromUser.equals("CHANGE"))
				{
					changePassword(userAccount,incoming,outgoing);
				}
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
	}

	//scans a data file with information about accounts, and pits these accounts into an arrayList
	public static void readAccounts(ArrayList<Account> accounts) {
		Scanner scan;
		AdminAccount adminAccount;
		ClientAccount clientAccount;
		
		try {
			scan = new Scanner(new File("data.txt"));//scans data file of accounts
		} catch (FileNotFoundException e) {
			System.out.println("Can't find file data.txt!");
			return;
		}
		
		while (scan.hasNextLine()) {
			String str = scan.nextLine();
			String[] array = str.split("%");
			String type = array[0];//type of account
			String name = array[1];
			String password = array[2];
			String profile = array[3];
	
			if (type.equals("ADMINISTRATOR")) {
				adminAccount = new AdminAccount(name, password, accounts);
				accounts.add(adminAccount);
			} else if (type.equals("CLIENT")) {
				clientAccount = new ClientAccount(name, password, profile);
				accounts.add(clientAccount);
			}
		}
		
	}

	//checks username and password sent by client, sets userAccount to whoever is logged in 
	//and tells client if it is a client or or admin account, or sends over the error message
	public static void login(ArrayList<Account> accounts, BufferedReader incoming, PrintWriter outgoing)
	{
		try
		{
			String toSend = "error: ";//the message to be sent at end of interaction. by default it send error, unless an account is selected
			String username= incoming.readLine();//username sent by client
			for(int i=0;i<accounts.size();i++)
			{
				if(username.equals(accounts.get(i).getUsername()))
				{
					if(accounts.get(i).verifyPassword(incoming.readLine()))//checks password of the account
					{
						if(accounts.get(i) instanceof AdminAccount)
							toSend="ADMIN";//sends this signal if the account is admin
						else toSend = "CLIENT";//sends this signal if the account is client
						userAccount = accounts.get(i);
					}
					else toSend = toSend+"Incorrect password";//sends if the username exists, but the password is wrong
				}
				
			}
			if(toSend.equals("error: "))
				toSend=toSend+"Incorrect username";//sends if the username does not exist
			outgoing.println(toSend);
			outgoing.flush();	
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	
	//sends the accounts array to the client in the form of strings
	public static void sendAccountList(PrintWriter outgoing2) 
	{
		try 
		{
			String toSend = "";
			for (int i = 0; i < accounts.size(); i++) 
			{
				toSend += accounts.get(i).toString() + "\n";
			}
			outgoing2.println(toSend);//list of all accounts in one string
			outgoing2.flush();
			System.out.println("sent");
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}
	}

	//sends the profile of the userAccount to the client
	public static void sendProfile(PrintWriter outgoing2) 
	{
		ClientAccount thisClient = (ClientAccount)(userAccount);
		outgoing2.println(thisClient.getProfile());
		outgoing2.flush();
	}

	//reads in a current password and new password sent by client. either successfully changes password for the userAccount or not. 
	//sends a message to client communicating if it was successful or if there was an error
	public static void changePassword(Account userAccount2, BufferedReader incoming2, PrintWriter outgoing2) 
	{
		try 
		{
			String toSend = "error: ";//the message to be sent at end of interaction. by default it send error, unless an account is selected
			String password = incoming2.readLine();//password sent by client
			String newPassword = incoming2.readLine(); //new password sent by client
			for (int i = 0; i < accounts.size(); i++) 
			{
				if (password.equals(accounts.get(i).getPassword())) 
				{
					accounts.get(i).setPassword(newPassword);//sets the new password
					if(accounts.get(i) instanceof AdminAccount)
						toSend="ADMIN";//sends this signal if the account is admin
					else toSend = "CLIENT";//sends this signal if the account is client
				} 
				else toSend = "error: current password not correct";//sends error message if it doesnt work
			}
			outgoing.println(toSend);
			outgoing.flush();	
			System.out.println("sent");
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
	}
}
